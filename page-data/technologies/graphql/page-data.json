{"componentChunkName":"component---src-templates-technology-tsx","path":"/technologies/graphql","result":{"data":{"markdownRemark":{"id":"7a9da462-1ce0-5f4a-b6d0-3a9bf147171d","html":"<p>When Facebook first previewed their upcoming graph data layer, I found the concepts compelling, and the query language promising. But when it finally arrived—buried largely within the bizarre abstractions and verbose oddities of <code>relay</code> (<em>getFatQuery</em>?)—the tooling fell well short of the promise. I must confess to briefly adopting a competitor that is now at best an also-ran in this space—Netflix’s <code>falcor</code>—simply due to the cleaner and less weighted-down API of the latter.</p>\n<p>Things began to change when Apollo stepped in and finally began to build tools for GraphQL which proved its generalizable utility outside of Relay. Within a short time spent <a href=\"/technologies/meteor\">adapting a large Meteor application to use GraphQL for all its fetching and mutations</a>, I was hooked on the concept and began to use it for a number of projects in different domains, even creating a few small wrappers to mimick the structure of <code>apollo-tools</code> <a href=\"https://gist.github.com/jasonphillips/d80642fc33d98cb34bad131adfcf6ed8\">within the python implementation of GraphQL of that time</a>. I have used Apollo’s various implementations, secondary tools (schema stitching, local state management, etc), and other features like subscriptions many times over the past years.</p>\n<p>In the context of <a href=\"/technologies/staticSites\">static-site generation</a>, I found Gatsby’s adoption of GraphQL for its data layer to be one of the features that has made it the ideal tool for static sites. At various times, I <a href=\"https://github.com/gatsbyjs/gatsby/pull/2452\">have contributed</a> to its codebase in this area. </p>\n<p>I have also developed internal tools for using GraphQL as a complete tool for describing and generating deeply nested (meaning, “pivoted” but with finer control) descriptive statistics, permitting my front-end code to declaratively describe the shape of any deep hierarchy of filters, grouping, or statistics, which are then converted immediately into a GraphQL query, sent to the server, and populated into tables (see <a href=\"https://github.com/jasonphillips/retabulate/tree/master/packages/retabulate-graphql/tests/schema\">the basic tests</a> for <code>retabulate-graphql</code>). More information on the initial motivation for that strategy is available under <a href=\"/technologies/sas\">SAS</a>, and it also forms a major part of my common <a href=\"/projects/dynamicReporting\">reporting strategy</a>.</p>","frontmatter":{"title":"GraphQL","tags":["react","orm","meteor"],"competence":"advanced","parent":null}},"tags":{"nodes":[{"id":"7dd06a9f-9baf-52a0-aee4-f8f96bfd72e9","fields":{"slug":"/technologies/meteor","tag":"meteor"},"frontmatter":{"title":"Meteor"}},{"id":"622fc898-6f2e-5531-8c13-a6c7b9742750","fields":{"slug":"/technologies/orm","tag":"orm"},"frontmatter":{"title":"ORM(s)"}},{"id":"97c03e57-9ce8-5f83-ab7e-6d87587a8f41","fields":{"slug":"/technologies/react","tag":"react"},"frontmatter":{"title":"React"}}]}},"pageContext":{"tags":["react","orm","meteor"]}}}